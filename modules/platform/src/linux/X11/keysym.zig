pub const XK_MISCELLANY = "";
pub const XK_XKB_KEYS = "";
pub const XK_LATIN1 = "";
pub const XK_LATIN2 = "";
pub const XK_LATIN3 = "";
pub const XK_LATIN4 = "";
pub const XK_GREEK = "";
pub const XK_VoidSymbol = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFF, .hexadecimal);
pub const XK_BackSpace = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF08, .hexadecimal);
pub const XK_Tab = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF09, .hexadecimal);
pub const XK_Linefeed = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF0A, .hexadecimal);
pub const XK_Clear = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF0B, .hexadecimal);
pub const XK_Return = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF0D, .hexadecimal);
pub const XK_Pause = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF13, .hexadecimal);
pub const XK_Scroll_Lock = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF14, .hexadecimal);
pub const XK_Sys_Req = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF15, .hexadecimal);
pub const XK_Escape = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF1B, .hexadecimal);
pub const XK_Delete = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFF, .hexadecimal);
pub const XK_Multi_key = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF20, .hexadecimal);
pub const XK_SingleCandidate = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF3C, .hexadecimal);
pub const XK_MultipleCandidate = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF3D, .hexadecimal);
pub const XK_PreviousCandidate = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF3E, .hexadecimal);
pub const XK_Kanji = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF21, .hexadecimal);
pub const XK_Muhenkan = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF22, .hexadecimal);
pub const XK_Henkan_Mode = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF23, .hexadecimal);
pub const XK_Henkan = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF23, .hexadecimal);
pub const XK_Romaji = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF24, .hexadecimal);
pub const XK_Hiragana = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF25, .hexadecimal);
pub const XK_Katakana = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF26, .hexadecimal);
pub const XK_Hiragana_Katakana = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF27, .hexadecimal);
pub const XK_Zenkaku = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF28, .hexadecimal);
pub const XK_Hankaku = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF29, .hexadecimal);
pub const XK_Zenkaku_Hankaku = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF2A, .hexadecimal);
pub const XK_Touroku = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF2B, .hexadecimal);
pub const XK_Massyo = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF2C, .hexadecimal);
pub const XK_Kana_Lock = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF2D, .hexadecimal);
pub const XK_Kana_Shift = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF2E, .hexadecimal);
pub const XK_Eisu_Shift = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF2F, .hexadecimal);
pub const XK_Eisu_toggle = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF30, .hexadecimal);
pub const XK_Zen_Koho = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF3D, .hexadecimal);
pub const XK_Mae_Koho = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF3E, .hexadecimal);
pub const XK_Home = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF50, .hexadecimal);
pub const XK_Left = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF51, .hexadecimal);
pub const XK_Up = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF52, .hexadecimal);
pub const XK_Right = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF53, .hexadecimal);
pub const XK_Down = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF54, .hexadecimal);
pub const XK_Prior = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF55, .hexadecimal);
pub const XK_Page_Up = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF55, .hexadecimal);
pub const XK_Next = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF56, .hexadecimal);
pub const XK_Page_Down = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF56, .hexadecimal);
pub const XK_End = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF57, .hexadecimal);
pub const XK_Begin = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF58, .hexadecimal);
pub const XK_Select = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF60, .hexadecimal);
pub const XK_Print = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF61, .hexadecimal);
pub const XK_Execute = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF62, .hexadecimal);
pub const XK_Insert = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF63, .hexadecimal);
pub const XK_Undo = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF65, .hexadecimal);
pub const XK_Redo = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF66, .hexadecimal);
pub const XK_Menu = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF67, .hexadecimal);
pub const XK_Find = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF68, .hexadecimal);
pub const XK_Cancel = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF69, .hexadecimal);
pub const XK_Help = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF6A, .hexadecimal);
pub const XK_Break = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF6B, .hexadecimal);
pub const XK_Mode_switch = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF7E, .hexadecimal);
pub const XK_script_switch = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF7E, .hexadecimal);
pub const XK_Num_Lock = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF7F, .hexadecimal);
pub const XK_KP_Space = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF80, .hexadecimal);
pub const XK_KP_Tab = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF89, .hexadecimal);
pub const XK_KP_Enter = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF8D, .hexadecimal);
pub const XK_KP_F1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF91, .hexadecimal);
pub const XK_KP_F2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF92, .hexadecimal);
pub const XK_KP_F3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF93, .hexadecimal);
pub const XK_KP_F4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF94, .hexadecimal);
pub const XK_KP_Home = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF95, .hexadecimal);
pub const XK_KP_Left = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF96, .hexadecimal);
pub const XK_KP_Up = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF97, .hexadecimal);
pub const XK_KP_Right = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF98, .hexadecimal);
pub const XK_KP_Down = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF99, .hexadecimal);
pub const XK_KP_Prior = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF9A, .hexadecimal);
pub const XK_KP_Page_Up = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF9A, .hexadecimal);
pub const XK_KP_Next = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF9B, .hexadecimal);
pub const XK_KP_Page_Down = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF9B, .hexadecimal);
pub const XK_KP_End = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF9C, .hexadecimal);
pub const XK_KP_Begin = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF9D, .hexadecimal);
pub const XK_KP_Insert = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF9E, .hexadecimal);
pub const XK_KP_Delete = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF9F, .hexadecimal);
pub const XK_KP_Equal = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFBD, .hexadecimal);
pub const XK_KP_Multiply = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFAA, .hexadecimal);
pub const XK_KP_Add = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFAB, .hexadecimal);
pub const XK_KP_Separator = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFAC, .hexadecimal);
pub const XK_KP_Subtract = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFAD, .hexadecimal);
pub const XK_KP_Decimal = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFAE, .hexadecimal);
pub const XK_KP_Divide = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFAF, .hexadecimal);
pub const XK_KP_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFB0, .hexadecimal);
pub const XK_KP_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFB1, .hexadecimal);
pub const XK_KP_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFB2, .hexadecimal);
pub const XK_KP_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFB3, .hexadecimal);
pub const XK_KP_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFB4, .hexadecimal);
pub const XK_KP_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFB5, .hexadecimal);
pub const XK_KP_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFB6, .hexadecimal);
pub const XK_KP_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFB7, .hexadecimal);
pub const XK_KP_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFB8, .hexadecimal);
pub const XK_KP_9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFB9, .hexadecimal);
pub const XK_F1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFBE, .hexadecimal);
pub const XK_F2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFBF, .hexadecimal);
pub const XK_F3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFC0, .hexadecimal);
pub const XK_F4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFC1, .hexadecimal);
pub const XK_F5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFC2, .hexadecimal);
pub const XK_F6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFC3, .hexadecimal);
pub const XK_F7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFC4, .hexadecimal);
pub const XK_F8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFC5, .hexadecimal);
pub const XK_F9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFC6, .hexadecimal);
pub const XK_F10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFC7, .hexadecimal);
pub const XK_F11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFC8, .hexadecimal);
pub const XK_L1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFC8, .hexadecimal);
pub const XK_F12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFC9, .hexadecimal);
pub const XK_L2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFC9, .hexadecimal);
pub const XK_F13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFCA, .hexadecimal);
pub const XK_L3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFCA, .hexadecimal);
pub const XK_F14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFCB, .hexadecimal);
pub const XK_L4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFCB, .hexadecimal);
pub const XK_F15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFCC, .hexadecimal);
pub const XK_L5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFCC, .hexadecimal);
pub const XK_F16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFCD, .hexadecimal);
pub const XK_L6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFCD, .hexadecimal);
pub const XK_F17 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFCE, .hexadecimal);
pub const XK_L7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFCE, .hexadecimal);
pub const XK_F18 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFCF, .hexadecimal);
pub const XK_L8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFCF, .hexadecimal);
pub const XK_F19 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFD0, .hexadecimal);
pub const XK_L9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFD0, .hexadecimal);
pub const XK_F20 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFD1, .hexadecimal);
pub const XK_L10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFD1, .hexadecimal);
pub const XK_F21 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFD2, .hexadecimal);
pub const XK_R1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFD2, .hexadecimal);
pub const XK_F22 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFD3, .hexadecimal);
pub const XK_R2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFD3, .hexadecimal);
pub const XK_F23 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFD4, .hexadecimal);
pub const XK_R3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFD4, .hexadecimal);
pub const XK_F24 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFD5, .hexadecimal);
pub const XK_R4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFD5, .hexadecimal);
pub const XK_F25 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFD6, .hexadecimal);
pub const XK_R5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFD6, .hexadecimal);
pub const XK_F26 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFD7, .hexadecimal);
pub const XK_R6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFD7, .hexadecimal);
pub const XK_F27 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFD8, .hexadecimal);
pub const XK_R7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFD8, .hexadecimal);
pub const XK_F28 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFD9, .hexadecimal);
pub const XK_R8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFD9, .hexadecimal);
pub const XK_F29 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFDA, .hexadecimal);
pub const XK_R9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFDA, .hexadecimal);
pub const XK_F30 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFDB, .hexadecimal);
pub const XK_R10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFDB, .hexadecimal);
pub const XK_F31 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFDC, .hexadecimal);
pub const XK_R11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFDC, .hexadecimal);
pub const XK_F32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFDD, .hexadecimal);
pub const XK_R12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFDD, .hexadecimal);
pub const XK_F33 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFDE, .hexadecimal);
pub const XK_R13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFDE, .hexadecimal);
pub const XK_F34 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFDF, .hexadecimal);
pub const XK_R14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFDF, .hexadecimal);
pub const XK_F35 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFE0, .hexadecimal);
pub const XK_R15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFE0, .hexadecimal);
pub const XK_Shift_L = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFE1, .hexadecimal);
pub const XK_Shift_R = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFE2, .hexadecimal);
pub const XK_Control_L = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFE3, .hexadecimal);
pub const XK_Control_R = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFE4, .hexadecimal);
pub const XK_Caps_Lock = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFE5, .hexadecimal);
pub const XK_Shift_Lock = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFE6, .hexadecimal);
pub const XK_Meta_L = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFE7, .hexadecimal);
pub const XK_Meta_R = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFE8, .hexadecimal);
pub const XK_Alt_L = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFE9, .hexadecimal);
pub const XK_Alt_R = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFEA, .hexadecimal);
pub const XK_Super_L = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFEB, .hexadecimal);
pub const XK_Super_R = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFEC, .hexadecimal);
pub const XK_Hyper_L = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFED, .hexadecimal);
pub const XK_Hyper_R = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFEE, .hexadecimal);
pub const XK_ISO_Lock = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE01, .hexadecimal);
pub const XK_ISO_Level2_Latch = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE02, .hexadecimal);
pub const XK_ISO_Level3_Shift = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE03, .hexadecimal);
pub const XK_ISO_Level3_Latch = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE04, .hexadecimal);
pub const XK_ISO_Level3_Lock = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE05, .hexadecimal);
pub const XK_ISO_Group_Shift = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF7E, .hexadecimal);
pub const XK_ISO_Group_Latch = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE06, .hexadecimal);
pub const XK_ISO_Group_Lock = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE07, .hexadecimal);
pub const XK_ISO_Next_Group = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE08, .hexadecimal);
pub const XK_ISO_Next_Group_Lock = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE09, .hexadecimal);
pub const XK_ISO_Prev_Group = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE0A, .hexadecimal);
pub const XK_ISO_Prev_Group_Lock = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE0B, .hexadecimal);
pub const XK_ISO_First_Group = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE0C, .hexadecimal);
pub const XK_ISO_First_Group_Lock = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE0D, .hexadecimal);
pub const XK_ISO_Last_Group = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE0E, .hexadecimal);
pub const XK_ISO_Last_Group_Lock = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE0F, .hexadecimal);
pub const XK_ISO_Left_Tab = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE20, .hexadecimal);
pub const XK_ISO_Move_Line_Up = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE21, .hexadecimal);
pub const XK_ISO_Move_Line_Down = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE22, .hexadecimal);
pub const XK_ISO_Partial_Line_Up = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE23, .hexadecimal);
pub const XK_ISO_Partial_Line_Down = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE24, .hexadecimal);
pub const XK_ISO_Partial_Space_Left = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE25, .hexadecimal);
pub const XK_ISO_Partial_Space_Right = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE26, .hexadecimal);
pub const XK_ISO_Set_Margin_Left = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE27, .hexadecimal);
pub const XK_ISO_Set_Margin_Right = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE28, .hexadecimal);
pub const XK_ISO_Release_Margin_Left = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE29, .hexadecimal);
pub const XK_ISO_Release_Margin_Right = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE2A, .hexadecimal);
pub const XK_ISO_Release_Both_Margins = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE2B, .hexadecimal);
pub const XK_ISO_Fast_Cursor_Left = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE2C, .hexadecimal);
pub const XK_ISO_Fast_Cursor_Right = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE2D, .hexadecimal);
pub const XK_ISO_Fast_Cursor_Up = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE2E, .hexadecimal);
pub const XK_ISO_Fast_Cursor_Down = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE2F, .hexadecimal);
pub const XK_ISO_Continuous_Underline = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE30, .hexadecimal);
pub const XK_ISO_Discontinuous_Underline = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE31, .hexadecimal);
pub const XK_ISO_Emphasize = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE32, .hexadecimal);
pub const XK_ISO_Center_Object = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE33, .hexadecimal);
pub const XK_ISO_Enter = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE34, .hexadecimal);
pub const XK_dead_grave = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE50, .hexadecimal);
pub const XK_dead_acute = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE51, .hexadecimal);
pub const XK_dead_circumflex = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE52, .hexadecimal);
pub const XK_dead_tilde = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE53, .hexadecimal);
pub const XK_dead_macron = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE54, .hexadecimal);
pub const XK_dead_breve = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE55, .hexadecimal);
pub const XK_dead_abovedot = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE56, .hexadecimal);
pub const XK_dead_diaeresis = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE57, .hexadecimal);
pub const XK_dead_abovering = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE58, .hexadecimal);
pub const XK_dead_doubleacute = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE59, .hexadecimal);
pub const XK_dead_caron = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE5A, .hexadecimal);
pub const XK_dead_cedilla = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE5B, .hexadecimal);
pub const XK_dead_ogonek = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE5C, .hexadecimal);
pub const XK_dead_iota = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE5D, .hexadecimal);
pub const XK_dead_voiced_sound = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE5E, .hexadecimal);
pub const XK_dead_semivoiced_sound = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE5F, .hexadecimal);
pub const XK_dead_belowdot = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE60, .hexadecimal);
pub const XK_First_Virtual_Screen = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFED0, .hexadecimal);
pub const XK_Prev_Virtual_Screen = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFED1, .hexadecimal);
pub const XK_Next_Virtual_Screen = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFED2, .hexadecimal);
pub const XK_Last_Virtual_Screen = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFED4, .hexadecimal);
pub const XK_Terminate_Server = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFED5, .hexadecimal);
pub const XK_AccessX_Enable = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE70, .hexadecimal);
pub const XK_AccessX_Feedback_Enable = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE71, .hexadecimal);
pub const XK_RepeatKeys_Enable = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE72, .hexadecimal);
pub const XK_SlowKeys_Enable = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE73, .hexadecimal);
pub const XK_BounceKeys_Enable = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE74, .hexadecimal);
pub const XK_StickyKeys_Enable = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE75, .hexadecimal);
pub const XK_MouseKeys_Enable = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE76, .hexadecimal);
pub const XK_MouseKeys_Accel_Enable = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE77, .hexadecimal);
pub const XK_Overlay1_Enable = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE78, .hexadecimal);
pub const XK_Overlay2_Enable = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE79, .hexadecimal);
pub const XK_AudibleBell_Enable = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFE7A, .hexadecimal);
pub const XK_Pointer_Left = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEE0, .hexadecimal);
pub const XK_Pointer_Right = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEE1, .hexadecimal);
pub const XK_Pointer_Up = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEE2, .hexadecimal);
pub const XK_Pointer_Down = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEE3, .hexadecimal);
pub const XK_Pointer_UpLeft = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEE4, .hexadecimal);
pub const XK_Pointer_UpRight = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEE5, .hexadecimal);
pub const XK_Pointer_DownLeft = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEE6, .hexadecimal);
pub const XK_Pointer_DownRight = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEE7, .hexadecimal);
pub const XK_Pointer_Button_Dflt = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEE8, .hexadecimal);
pub const XK_Pointer_Button1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEE9, .hexadecimal);
pub const XK_Pointer_Button2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEEA, .hexadecimal);
pub const XK_Pointer_Button3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEEB, .hexadecimal);
pub const XK_Pointer_Button4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEEC, .hexadecimal);
pub const XK_Pointer_Button5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEED, .hexadecimal);
pub const XK_Pointer_DblClick_Dflt = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEEE, .hexadecimal);
pub const XK_Pointer_DblClick1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEEF, .hexadecimal);
pub const XK_Pointer_DblClick2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEF0, .hexadecimal);
pub const XK_Pointer_DblClick3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEF1, .hexadecimal);
pub const XK_Pointer_DblClick4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEF2, .hexadecimal);
pub const XK_Pointer_DblClick5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEF3, .hexadecimal);
pub const XK_Pointer_Drag_Dflt = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEF4, .hexadecimal);
pub const XK_Pointer_Drag1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEF5, .hexadecimal);
pub const XK_Pointer_Drag2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEF6, .hexadecimal);
pub const XK_Pointer_Drag3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEF7, .hexadecimal);
pub const XK_Pointer_Drag4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEF8, .hexadecimal);
pub const XK_Pointer_Drag5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEFD, .hexadecimal);
pub const XK_Pointer_EnableKeys = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEF9, .hexadecimal);
pub const XK_Pointer_Accelerate = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEFA, .hexadecimal);
pub const XK_Pointer_DfltBtnNext = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEFB, .hexadecimal);
pub const XK_Pointer_DfltBtnPrev = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFEFC, .hexadecimal);
pub const XK_space = @as(c_int, 0x020);
pub const XK_exclam = @as(c_int, 0x021);
pub const XK_quotedbl = @as(c_int, 0x022);
pub const XK_numbersign = @as(c_int, 0x023);
pub const XK_dollar = @as(c_int, 0x024);
pub const XK_percent = @as(c_int, 0x025);
pub const XK_ampersand = @as(c_int, 0x026);
pub const XK_apostrophe = @as(c_int, 0x027);
pub const XK_quoteright = @as(c_int, 0x027);
pub const XK_parenleft = @as(c_int, 0x028);
pub const XK_parenright = @as(c_int, 0x029);
pub const XK_asterisk = @as(c_int, 0x02a);
pub const XK_plus = @as(c_int, 0x02b);
pub const XK_comma = @as(c_int, 0x02c);
pub const XK_minus = @as(c_int, 0x02d);
pub const XK_period = @as(c_int, 0x02e);
pub const XK_slash = @as(c_int, 0x02f);
pub const XK_0 = @as(c_int, 0x030);
pub const XK_1 = @as(c_int, 0x031);
pub const XK_2 = @as(c_int, 0x032);
pub const XK_3 = @as(c_int, 0x033);
pub const XK_4 = @as(c_int, 0x034);
pub const XK_5 = @as(c_int, 0x035);
pub const XK_6 = @as(c_int, 0x036);
pub const XK_7 = @as(c_int, 0x037);
pub const XK_8 = @as(c_int, 0x038);
pub const XK_9 = @as(c_int, 0x039);
pub const XK_colon = @as(c_int, 0x03a);
pub const XK_semicolon = @as(c_int, 0x03b);
pub const XK_less = @as(c_int, 0x03c);
pub const XK_equal = @as(c_int, 0x03d);
pub const XK_greater = @as(c_int, 0x03e);
pub const XK_question = @as(c_int, 0x03f);
pub const XK_at = @as(c_int, 0x040);
pub const XK_A = @as(c_int, 0x041);
pub const XK_B = @as(c_int, 0x042);
pub const XK_C = @as(c_int, 0x043);
pub const XK_D = @as(c_int, 0x044);
pub const XK_E = @as(c_int, 0x045);
pub const XK_F = @as(c_int, 0x046);
pub const XK_G = @as(c_int, 0x047);
pub const XK_H = @as(c_int, 0x048);
pub const XK_I = @as(c_int, 0x049);
pub const XK_J = @as(c_int, 0x04a);
pub const XK_K = @as(c_int, 0x04b);
pub const XK_L = @as(c_int, 0x04c);
pub const XK_M = @as(c_int, 0x04d);
pub const XK_N = @as(c_int, 0x04e);
pub const XK_O = @as(c_int, 0x04f);
pub const XK_P = @as(c_int, 0x050);
pub const XK_Q = @as(c_int, 0x051);
pub const XK_R = @as(c_int, 0x052);
pub const XK_S = @as(c_int, 0x053);
pub const XK_T = @as(c_int, 0x054);
pub const XK_U = @as(c_int, 0x055);
pub const XK_V = @as(c_int, 0x056);
pub const XK_W = @as(c_int, 0x057);
pub const XK_X = @as(c_int, 0x058);
pub const XK_Y = @as(c_int, 0x059);
pub const XK_Z = @as(c_int, 0x05a);
pub const XK_bracketleft = @as(c_int, 0x05b);
pub const XK_backslash = @as(c_int, 0x05c);
pub const XK_bracketright = @as(c_int, 0x05d);
pub const XK_asciicircum = @as(c_int, 0x05e);
pub const XK_underscore = @as(c_int, 0x05f);
pub const XK_grave = @as(c_int, 0x060);
pub const XK_quoteleft = @as(c_int, 0x060);
pub const XK_a = @as(c_int, 0x061);
pub const XK_b = @as(c_int, 0x062);
pub const XK_c = @as(c_int, 0x063);
pub const XK_d = @as(c_int, 0x064);
pub const XK_e = @as(c_int, 0x065);
pub const XK_f = @as(c_int, 0x066);
pub const XK_g = @as(c_int, 0x067);
pub const XK_h = @as(c_int, 0x068);
pub const XK_i = @as(c_int, 0x069);
pub const XK_j = @as(c_int, 0x06a);
pub const XK_k = @as(c_int, 0x06b);
pub const XK_l = @as(c_int, 0x06c);
pub const XK_m = @as(c_int, 0x06d);
pub const XK_n = @as(c_int, 0x06e);
pub const XK_o = @as(c_int, 0x06f);
pub const XK_p = @as(c_int, 0x070);
pub const XK_q = @as(c_int, 0x071);
pub const XK_r = @as(c_int, 0x072);
pub const XK_s = @as(c_int, 0x073);
pub const XK_t = @as(c_int, 0x074);
pub const XK_u = @as(c_int, 0x075);
pub const XK_v = @as(c_int, 0x076);
pub const XK_w = @as(c_int, 0x077);
pub const XK_x = @as(c_int, 0x078);
pub const XK_y = @as(c_int, 0x079);
pub const XK_z = @as(c_int, 0x07a);
pub const XK_braceleft = @as(c_int, 0x07b);
pub const XK_bar = @as(c_int, 0x07c);
pub const XK_braceright = @as(c_int, 0x07d);
pub const XK_asciitilde = @as(c_int, 0x07e);
pub const XK_nobreakspace = @as(c_int, 0x0a0);
pub const XK_exclamdown = @as(c_int, 0x0a1);
pub const XK_cent = @as(c_int, 0x0a2);
pub const XK_sterling = @as(c_int, 0x0a3);
pub const XK_currency = @as(c_int, 0x0a4);
pub const XK_yen = @as(c_int, 0x0a5);
pub const XK_brokenbar = @as(c_int, 0x0a6);
pub const XK_section = @as(c_int, 0x0a7);
pub const XK_diaeresis = @as(c_int, 0x0a8);
pub const XK_copyright = @as(c_int, 0x0a9);
pub const XK_ordfeminine = @as(c_int, 0x0aa);
pub const XK_guillemotleft = @as(c_int, 0x0ab);
pub const XK_notsign = @as(c_int, 0x0ac);
pub const XK_hyphen = @as(c_int, 0x0ad);
pub const XK_registered = @as(c_int, 0x0ae);
pub const XK_macron = @as(c_int, 0x0af);
pub const XK_degree = @as(c_int, 0x0b0);
pub const XK_plusminus = @as(c_int, 0x0b1);
pub const XK_twosuperior = @as(c_int, 0x0b2);
pub const XK_threesuperior = @as(c_int, 0x0b3);
pub const XK_acute = @as(c_int, 0x0b4);
pub const XK_mu = @as(c_int, 0x0b5);
pub const XK_paragraph = @as(c_int, 0x0b6);
pub const XK_periodcentered = @as(c_int, 0x0b7);
pub const XK_cedilla = @as(c_int, 0x0b8);
pub const XK_onesuperior = @as(c_int, 0x0b9);
pub const XK_masculine = @as(c_int, 0x0ba);
pub const XK_guillemotright = @as(c_int, 0x0bb);
pub const XK_onequarter = @as(c_int, 0x0bc);
pub const XK_onehalf = @as(c_int, 0x0bd);
pub const XK_threequarters = @as(c_int, 0x0be);
pub const XK_questiondown = @as(c_int, 0x0bf);
pub const XK_Agrave = @as(c_int, 0x0c0);
pub const XK_Aacute = @as(c_int, 0x0c1);
pub const XK_Acircumflex = @as(c_int, 0x0c2);
pub const XK_Atilde = @as(c_int, 0x0c3);
pub const XK_Adiaeresis = @as(c_int, 0x0c4);
pub const XK_Aring = @as(c_int, 0x0c5);
pub const XK_AE = @as(c_int, 0x0c6);
pub const XK_Ccedilla = @as(c_int, 0x0c7);
pub const XK_Egrave = @as(c_int, 0x0c8);
pub const XK_Eacute = @as(c_int, 0x0c9);
pub const XK_Ecircumflex = @as(c_int, 0x0ca);
pub const XK_Ediaeresis = @as(c_int, 0x0cb);
pub const XK_Igrave = @as(c_int, 0x0cc);
pub const XK_Iacute = @as(c_int, 0x0cd);
pub const XK_Icircumflex = @as(c_int, 0x0ce);
pub const XK_Idiaeresis = @as(c_int, 0x0cf);
pub const XK_ETH = @as(c_int, 0x0d0);
pub const XK_Eth = @as(c_int, 0x0d0);
pub const XK_Ntilde = @as(c_int, 0x0d1);
pub const XK_Ograve = @as(c_int, 0x0d2);
pub const XK_Oacute = @as(c_int, 0x0d3);
pub const XK_Ocircumflex = @as(c_int, 0x0d4);
pub const XK_Otilde = @as(c_int, 0x0d5);
pub const XK_Odiaeresis = @as(c_int, 0x0d6);
pub const XK_multiply = @as(c_int, 0x0d7);
pub const XK_Ooblique = @as(c_int, 0x0d8);
pub const XK_Ugrave = @as(c_int, 0x0d9);
pub const XK_Uacute = @as(c_int, 0x0da);
pub const XK_Ucircumflex = @as(c_int, 0x0db);
pub const XK_Udiaeresis = @as(c_int, 0x0dc);
pub const XK_Yacute = @as(c_int, 0x0dd);
pub const XK_THORN = @as(c_int, 0x0de);
pub const XK_Thorn = @as(c_int, 0x0de);
pub const XK_ssharp = @as(c_int, 0x0df);
pub const XK_agrave = @as(c_int, 0x0e0);
pub const XK_aacute = @as(c_int, 0x0e1);
pub const XK_acircumflex = @as(c_int, 0x0e2);
pub const XK_atilde = @as(c_int, 0x0e3);
pub const XK_adiaeresis = @as(c_int, 0x0e4);
pub const XK_aring = @as(c_int, 0x0e5);
pub const XK_ae = @as(c_int, 0x0e6);
pub const XK_ccedilla = @as(c_int, 0x0e7);
pub const XK_egrave = @as(c_int, 0x0e8);
pub const XK_eacute = @as(c_int, 0x0e9);
pub const XK_ecircumflex = @as(c_int, 0x0ea);
pub const XK_ediaeresis = @as(c_int, 0x0eb);
pub const XK_igrave = @as(c_int, 0x0ec);
pub const XK_iacute = @as(c_int, 0x0ed);
pub const XK_icircumflex = @as(c_int, 0x0ee);
pub const XK_idiaeresis = @as(c_int, 0x0ef);
pub const XK_eth = @as(c_int, 0x0f0);
pub const XK_ntilde = @as(c_int, 0x0f1);
pub const XK_ograve = @as(c_int, 0x0f2);
pub const XK_oacute = @as(c_int, 0x0f3);
pub const XK_ocircumflex = @as(c_int, 0x0f4);
pub const XK_otilde = @as(c_int, 0x0f5);
pub const XK_odiaeresis = @as(c_int, 0x0f6);
pub const XK_division = @as(c_int, 0x0f7);
pub const XK_oslash = @as(c_int, 0x0f8);
pub const XK_ugrave = @as(c_int, 0x0f9);
pub const XK_uacute = @as(c_int, 0x0fa);
pub const XK_ucircumflex = @as(c_int, 0x0fb);
pub const XK_udiaeresis = @as(c_int, 0x0fc);
pub const XK_yacute = @as(c_int, 0x0fd);
pub const XK_thorn = @as(c_int, 0x0fe);
pub const XK_ydiaeresis = @as(c_int, 0x0ff);
pub const XK_Aogonek = @as(c_int, 0x1a1);
pub const XK_breve = @as(c_int, 0x1a2);
pub const XK_Lstroke = @as(c_int, 0x1a3);
pub const XK_Lcaron = @as(c_int, 0x1a5);
pub const XK_Sacute = @as(c_int, 0x1a6);
pub const XK_Scaron = @as(c_int, 0x1a9);
pub const XK_Scedilla = @as(c_int, 0x1aa);
pub const XK_Tcaron = @as(c_int, 0x1ab);
pub const XK_Zacute = @as(c_int, 0x1ac);
pub const XK_Zcaron = @as(c_int, 0x1ae);
pub const XK_Zabovedot = @as(c_int, 0x1af);
pub const XK_aogonek = @as(c_int, 0x1b1);
pub const XK_ogonek = @as(c_int, 0x1b2);
pub const XK_lstroke = @as(c_int, 0x1b3);
pub const XK_lcaron = @as(c_int, 0x1b5);
pub const XK_sacute = @as(c_int, 0x1b6);
pub const XK_caron = @as(c_int, 0x1b7);
pub const XK_scaron = @as(c_int, 0x1b9);
pub const XK_scedilla = @as(c_int, 0x1ba);
pub const XK_tcaron = @as(c_int, 0x1bb);
pub const XK_zacute = @as(c_int, 0x1bc);
pub const XK_doubleacute = @as(c_int, 0x1bd);
pub const XK_zcaron = @as(c_int, 0x1be);
pub const XK_zabovedot = @as(c_int, 0x1bf);
pub const XK_Racute = @as(c_int, 0x1c0);
pub const XK_Abreve = @as(c_int, 0x1c3);
pub const XK_Lacute = @as(c_int, 0x1c5);
pub const XK_Cacute = @as(c_int, 0x1c6);
pub const XK_Ccaron = @as(c_int, 0x1c8);
pub const XK_Eogonek = @as(c_int, 0x1ca);
pub const XK_Ecaron = @as(c_int, 0x1cc);
pub const XK_Dcaron = @as(c_int, 0x1cf);
pub const XK_Dstroke = @as(c_int, 0x1d0);
pub const XK_Nacute = @as(c_int, 0x1d1);
pub const XK_Ncaron = @as(c_int, 0x1d2);
pub const XK_Odoubleacute = @as(c_int, 0x1d5);
pub const XK_Rcaron = @as(c_int, 0x1d8);
pub const XK_Uring = @as(c_int, 0x1d9);
pub const XK_Udoubleacute = @as(c_int, 0x1db);
pub const XK_Tcedilla = @as(c_int, 0x1de);
pub const XK_racute = @as(c_int, 0x1e0);
pub const XK_abreve = @as(c_int, 0x1e3);
pub const XK_lacute = @as(c_int, 0x1e5);
pub const XK_cacute = @as(c_int, 0x1e6);
pub const XK_ccaron = @as(c_int, 0x1e8);
pub const XK_eogonek = @as(c_int, 0x1ea);
pub const XK_ecaron = @as(c_int, 0x1ec);
pub const XK_dcaron = @as(c_int, 0x1ef);
pub const XK_dstroke = @as(c_int, 0x1f0);
pub const XK_nacute = @as(c_int, 0x1f1);
pub const XK_ncaron = @as(c_int, 0x1f2);
pub const XK_odoubleacute = @as(c_int, 0x1f5);
pub const XK_udoubleacute = @as(c_int, 0x1fb);
pub const XK_rcaron = @as(c_int, 0x1f8);
pub const XK_uring = @as(c_int, 0x1f9);
pub const XK_tcedilla = @as(c_int, 0x1fe);
pub const XK_abovedot = @as(c_int, 0x1ff);
pub const XK_Hstroke = @as(c_int, 0x2a1);
pub const XK_Hcircumflex = @as(c_int, 0x2a6);
pub const XK_Iabovedot = @as(c_int, 0x2a9);
pub const XK_Gbreve = @as(c_int, 0x2ab);
pub const XK_Jcircumflex = @as(c_int, 0x2ac);
pub const XK_hstroke = @as(c_int, 0x2b1);
pub const XK_hcircumflex = @as(c_int, 0x2b6);
pub const XK_idotless = @as(c_int, 0x2b9);
pub const XK_gbreve = @as(c_int, 0x2bb);
pub const XK_jcircumflex = @as(c_int, 0x2bc);
pub const XK_Cabovedot = @as(c_int, 0x2c5);
pub const XK_Ccircumflex = @as(c_int, 0x2c6);
pub const XK_Gabovedot = @as(c_int, 0x2d5);
pub const XK_Gcircumflex = @as(c_int, 0x2d8);
pub const XK_Ubreve = @as(c_int, 0x2dd);
pub const XK_Scircumflex = @as(c_int, 0x2de);
pub const XK_cabovedot = @as(c_int, 0x2e5);
pub const XK_ccircumflex = @as(c_int, 0x2e6);
pub const XK_gabovedot = @as(c_int, 0x2f5);
pub const XK_gcircumflex = @as(c_int, 0x2f8);
pub const XK_ubreve = @as(c_int, 0x2fd);
pub const XK_scircumflex = @as(c_int, 0x2fe);
pub const XK_kra = @as(c_int, 0x3a2);
pub const XK_kappa = @as(c_int, 0x3a2);
pub const XK_Rcedilla = @as(c_int, 0x3a3);
pub const XK_Itilde = @as(c_int, 0x3a5);
pub const XK_Lcedilla = @as(c_int, 0x3a6);
pub const XK_Emacron = @as(c_int, 0x3aa);
pub const XK_Gcedilla = @as(c_int, 0x3ab);
pub const XK_Tslash = @as(c_int, 0x3ac);
pub const XK_rcedilla = @as(c_int, 0x3b3);
pub const XK_itilde = @as(c_int, 0x3b5);
pub const XK_lcedilla = @as(c_int, 0x3b6);
pub const XK_emacron = @as(c_int, 0x3ba);
pub const XK_gcedilla = @as(c_int, 0x3bb);
pub const XK_tslash = @as(c_int, 0x3bc);
pub const XK_ENG = @as(c_int, 0x3bd);
pub const XK_eng = @as(c_int, 0x3bf);
pub const XK_Amacron = @as(c_int, 0x3c0);
pub const XK_Iogonek = @as(c_int, 0x3c7);
pub const XK_Eabovedot = @as(c_int, 0x3cc);
pub const XK_Imacron = @as(c_int, 0x3cf);
pub const XK_Ncedilla = @as(c_int, 0x3d1);
pub const XK_Omacron = @as(c_int, 0x3d2);
pub const XK_Kcedilla = @as(c_int, 0x3d3);
pub const XK_Uogonek = @as(c_int, 0x3d9);
pub const XK_Utilde = @as(c_int, 0x3dd);
pub const XK_Umacron = @as(c_int, 0x3de);
pub const XK_amacron = @as(c_int, 0x3e0);
pub const XK_iogonek = @as(c_int, 0x3e7);
pub const XK_eabovedot = @as(c_int, 0x3ec);
pub const XK_imacron = @as(c_int, 0x3ef);
pub const XK_ncedilla = @as(c_int, 0x3f1);
pub const XK_omacron = @as(c_int, 0x3f2);
pub const XK_kcedilla = @as(c_int, 0x3f3);
pub const XK_uogonek = @as(c_int, 0x3f9);
pub const XK_utilde = @as(c_int, 0x3fd);
pub const XK_umacron = @as(c_int, 0x3fe);
pub const XK_Greek_ALPHAaccent = @as(c_int, 0x7a1);
pub const XK_Greek_EPSILONaccent = @as(c_int, 0x7a2);
pub const XK_Greek_ETAaccent = @as(c_int, 0x7a3);
pub const XK_Greek_IOTAaccent = @as(c_int, 0x7a4);
pub const XK_Greek_IOTAdieresis = @as(c_int, 0x7a5);
pub const XK_Greek_OMICRONaccent = @as(c_int, 0x7a7);
pub const XK_Greek_UPSILONaccent = @as(c_int, 0x7a8);
pub const XK_Greek_UPSILONdieresis = @as(c_int, 0x7a9);
pub const XK_Greek_OMEGAaccent = @as(c_int, 0x7ab);
pub const XK_Greek_accentdieresis = @as(c_int, 0x7ae);
pub const XK_Greek_horizbar = @as(c_int, 0x7af);
pub const XK_Greek_alphaaccent = @as(c_int, 0x7b1);
pub const XK_Greek_epsilonaccent = @as(c_int, 0x7b2);
pub const XK_Greek_etaaccent = @as(c_int, 0x7b3);
pub const XK_Greek_iotaaccent = @as(c_int, 0x7b4);
pub const XK_Greek_iotadieresis = @as(c_int, 0x7b5);
pub const XK_Greek_iotaaccentdieresis = @as(c_int, 0x7b6);
pub const XK_Greek_omicronaccent = @as(c_int, 0x7b7);
pub const XK_Greek_upsilonaccent = @as(c_int, 0x7b8);
pub const XK_Greek_upsilondieresis = @as(c_int, 0x7b9);
pub const XK_Greek_upsilonaccentdieresis = @as(c_int, 0x7ba);
pub const XK_Greek_omegaaccent = @as(c_int, 0x7bb);
pub const XK_Greek_ALPHA = @as(c_int, 0x7c1);
pub const XK_Greek_BETA = @as(c_int, 0x7c2);
pub const XK_Greek_GAMMA = @as(c_int, 0x7c3);
pub const XK_Greek_DELTA = @as(c_int, 0x7c4);
pub const XK_Greek_EPSILON = @as(c_int, 0x7c5);
pub const XK_Greek_ZETA = @as(c_int, 0x7c6);
pub const XK_Greek_ETA = @as(c_int, 0x7c7);
pub const XK_Greek_THETA = @as(c_int, 0x7c8);
pub const XK_Greek_IOTA = @as(c_int, 0x7c9);
pub const XK_Greek_KAPPA = @as(c_int, 0x7ca);
pub const XK_Greek_LAMDA = @as(c_int, 0x7cb);
pub const XK_Greek_LAMBDA = @as(c_int, 0x7cb);
pub const XK_Greek_MU = @as(c_int, 0x7cc);
pub const XK_Greek_NU = @as(c_int, 0x7cd);
pub const XK_Greek_XI = @as(c_int, 0x7ce);
pub const XK_Greek_OMICRON = @as(c_int, 0x7cf);
pub const XK_Greek_PI = @as(c_int, 0x7d0);
pub const XK_Greek_RHO = @as(c_int, 0x7d1);
pub const XK_Greek_SIGMA = @as(c_int, 0x7d2);
pub const XK_Greek_TAU = @as(c_int, 0x7d4);
pub const XK_Greek_UPSILON = @as(c_int, 0x7d5);
pub const XK_Greek_PHI = @as(c_int, 0x7d6);
pub const XK_Greek_CHI = @as(c_int, 0x7d7);
pub const XK_Greek_PSI = @as(c_int, 0x7d8);
pub const XK_Greek_OMEGA = @as(c_int, 0x7d9);
pub const XK_Greek_alpha = @as(c_int, 0x7e1);
pub const XK_Greek_beta = @as(c_int, 0x7e2);
pub const XK_Greek_gamma = @as(c_int, 0x7e3);
pub const XK_Greek_delta = @as(c_int, 0x7e4);
pub const XK_Greek_epsilon = @as(c_int, 0x7e5);
pub const XK_Greek_zeta = @as(c_int, 0x7e6);
pub const XK_Greek_eta = @as(c_int, 0x7e7);
pub const XK_Greek_theta = @as(c_int, 0x7e8);
pub const XK_Greek_iota = @as(c_int, 0x7e9);
pub const XK_Greek_kappa = @as(c_int, 0x7ea);
pub const XK_Greek_lamda = @as(c_int, 0x7eb);
pub const XK_Greek_lambda = @as(c_int, 0x7eb);
pub const XK_Greek_mu = @as(c_int, 0x7ec);
pub const XK_Greek_nu = @as(c_int, 0x7ed);
pub const XK_Greek_xi = @as(c_int, 0x7ee);
pub const XK_Greek_omicron = @as(c_int, 0x7ef);
pub const XK_Greek_pi = @as(c_int, 0x7f0);
pub const XK_Greek_rho = @as(c_int, 0x7f1);
pub const XK_Greek_sigma = @as(c_int, 0x7f2);
pub const XK_Greek_finalsmallsigma = @as(c_int, 0x7f3);
pub const XK_Greek_tau = @as(c_int, 0x7f4);
pub const XK_Greek_upsilon = @as(c_int, 0x7f5);
pub const XK_Greek_phi = @as(c_int, 0x7f6);
pub const XK_Greek_chi = @as(c_int, 0x7f7);
pub const XK_Greek_psi = @as(c_int, 0x7f8);
pub const XK_Greek_omega = @as(c_int, 0x7f9);
pub const XK_Greek_switch = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF7E, .hexadecimal);
pub const XK_EuroSign = @as(c_int, 0x20ac);
